package org.nest.sematicAnalysis;

import org.nest.errors.ErrorManager;

import java.util.List;

/// Defines the contract for a semantic analyzer, which is responsible for validating the semantic correctness
/// of Abstract Syntax Trees (ASTs) generated by a parser.
///
/// Users of the NestCompilerTools library should implement this interface to define custom semantic rules
/// specific to their language. The implementation's constructor is expected to receive all necessary ASTs
/// and any contextual information required to perform the analysis (e.g., symbol tables, type information).
///
/// The [#analyze()] method will then process these inputs and produce a list of [ErrorManager]s.
/// Each `ErrorManager` typically corresponds to a single source file and contains any semantic errors
/// found within that file. If the returned list is empty, it signifies that the semantic analysis passed
/// successfully for all analyzed units.
public interface SematicAnalyzer
{
    /**
     * Performs semantic analysis on the provided ASTs and context.
     *
     * @return A list of {@link ErrorManager} objects. Each {@code ErrorManager} encapsulates errors found
     *         in a specific compilation unit or file. An empty list indicates that no semantic errors were
     *         detected.
     */
    List<ErrorManager> analyze();
}
